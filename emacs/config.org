* Emacs
** Theme
#+begin_src emacs-lisp
  (load-theme 'catppuccin :no-confirm)
  (setq catppuccin-flavor 'mocha) ;; or 'latte, 'mochiatto
  (catppuccin-reload)
#+end_src

** Layout
#+begin_src emacs-lisp
  ;; Disable tool bar
  (tool-bar-mode -1)

  ;; Disable menu bar
  (menu-bar-mode -1)

  ;; Disable scroll bar
  (scroll-bar-mode -1)

  ;; Disable start up emacs message and go to buffer
  (setq inhibit-startup-message t)

  ;; Disable backup file
  (setq make-backup-file nil)

  ;; Disable auto save
  (setq auto-save-default nil)

  ;; Improve scrolling
  (setq scroll-conservatively 100)

  ;; Utilize prettify sybmols
  (when window-system (global-prettify-symbols-mode t))

  ;; Highlight cursor line
  (when window-system (global-hl-line-mode t))
#+end_src

** Emacs Frame Transparency Configuration
  This configuration controls the transparency of the Emacs frame, making it
  slightly more transparent when it is not in focus, and slightly less transparent
  when it is the active window. This helps in distinguishing the active Emacs frame
  when working with multiple windows or applications.

*** Code Description
   - The function =set-frame-transparency= adjusts the transparency of the Emacs frame.
   - Transparency levels are set to 95% when the frame is focused, and 70% when it is not.
   - Hooks are added to =focus-in-hook= and =focus-out-hook= to trigger transparency changes.

*** Dependencies
   This configuration is dependent on the Emacs version that supports frame parameters
   and transparency. It has been tested on Emacs 27.1 and later.

*** Usage Instructions
   1. Place the Lisp code in your Emacs configuration file (usually =.emacs= or =init.el=).
   2. Restart Emacs, or evaluate the code if Emacs is already running.
   3. The frame transparency will automatically adjust based on focus changes.

*** Emacs Lisp Code
   #+BEGIN_SRC emacs-lisp
     (defun set-frame-transparency (active)
       "Set the frame transparency. ACTIVE non-nil means frame is focused."
       (let ((transparency (if active 95 70))) ; Adjust these numbers for desired transparency
         (set-frame-parameter nil 'alpha transparency)))

     (add-hook 'focus-in-hook (lambda () (set-frame-transparency t)))
     (add-hook 'focus-out-hook (lambda () (set-frame-transparency nil)))

     ;; Set initial transparency
     (set-frame-parameter nil 'alpha 95)
   #+END_SRC

*** Potential Issues and Troubleshooting
   - If the transparency effects are not visible, check if your operating system
     and window manager support variable transparency for applications.
   - Adjust the transparency values in the code if the default levels are not suitable
     for your preferences or display settings.

** Prompt
#+begin_src emacs-lisp
  ;; Change yes-no prompt to y-or-n
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Disable ring
  (setq ring-bell-function 'ignore)
#+end_src

** Visiting the configuration
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
** Reloading the configuration
Simply pressing =Control-c r= will reload this file, very handy.
#+begin_src emacs-lisp
  (defun config-reload ()
    "Reloads config.org from either ~/.emacs.d/ or ~/.config/emacs/."
    (interactive)
    (let ((path1 (expand-file-name "~/.emacs.d/config.org"))
	  (path2 (expand-file-name "~/.config/emacs/config.org")))
      (cond
       ((file-exists-p path1)
	(org-babel-load-file path1)
	(message "Reloaded config from: %s" path1))
       ((file-exists-p path2)
	(org-babel-load-file path2)
	(message "Reloaded config from: %s" path2))
       (t
	(message "config.org not found in either ~/.emacs.d/ or ~/.config/emacs/")))))

  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
** Setting default shell to zsh
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
  ;; (global-set-key (kbd "<s-return>)" 'ansi-term)
#+end_src

* Org
** Org Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src

* IDO
** Enable ido mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** IDO-Vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** SMEX
#+begin_src emacs-lisp
  (use-package smex
    :ensure
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src
** Switch Buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src
* Buffer
** Enable iBuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+end_src
** Expert
#+begin_src emacs-lisp
  (setq ibuffer-expert t)
#+end_src
* Avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure
    :bind
    ("M-s" . avy-goto-char))
#+end_src
* Evil Mode
** Install
#+begin_src emacs-lisp
  (unless (package-installed-p 'evil)
    (package-install 'evil))

  (use-package evil-leader
    :ensure t
    :after evil
    :init
    (setq evil-leader/leader ",")
    :config
    (global-evil-leader-mode 1)
    
    (evil-leader/set-key
     "w" 'save-buffer
     "t" (lambda ()
         (interactive)
         (ansi-term "zsh"))
     "e" 'ido-switch-buffer
    ))
#+end_src
** Enable
#+begin_src emacs-lisp
  (require 'evil)
  (evil-mode 1)
#+End_src

Split window configuratio
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-w v") 'split-window-right)
  (define-key evil-normal-state-map (kbd "C-w s") 'split-window-below)
  (define-key evil-normal-state-map (kbd "C-w c") 'delete-window)

  ;; Focus moves to new window after split
  (setq evil-split-window-below t)
  (setq evil-split-window-right t)
#+end_src
* Telelphone-line
** Install
#+begin_src emacs-lisp
  (unless (package-installed-p 'telephone-line)
    (package-install 'telephone-line))
#+end_src
** Enable
#+begin_src emacs-lisp
  (telephone-line-mode 1)
#+end_src
** Config
#+begin_src emacs-lisp
    (setq telephone-line-lhs
	'((evil   . (telephone-line-evil-tag-segment))
	  (accent . (telephone-line-vc-segment
		     telephone-line-erc-modified-channels-segment
		     telephone-line-process-segment))
	  (nil    . (telephone-line-minor-mode-segment
		     telephone-line-buffer-segment))))
  (setq telephone-line-rhs
	'((nil    . (telephone-line-misc-info-segment))
	  (accent . (telephone-line-major-mode-segment))
	  (evil   . (telephone-line-airline-position-segment))))
#+end_src
* Magit
** Install
#+begin_src emacs-lisp
  (unless (package-installed-p 'magit)
    (package-install 'magit))
#+end_src
