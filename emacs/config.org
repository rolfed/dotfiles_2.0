* Emacs
** Theme
#+begin_src 
  (load-theme 'catppuccin :no-confirm)
  (setq catppuccin-flavor 'frappe) ;; or 'latte, 'mochiatto
  (catppuccin-reload)
#+end_src
* Emacs
** Theme
#+begin_src emacs-lisp
  (load-theme 'catppuccin :no-confirm)
  (setq catppuccin-flavor 'frappe) ;; or 'latte, 'mochiatto
  (catppuccin-reload)
#+end_src

** Layout
#+begin_src emacs-lisp
  ;; Disable tool bar
  (tool-bar-mode -1)

  ;; Disable menu bar
  (menu-bar-mode -1)

  ;; Disable scroll bar
  (scroll-bar-mode -1)

  ;; Disable start up emacs message and go to buffer
  (setq inhibit-startup-message t)

  ;; Disable backup file
  (setq make-backup-files nil)

  ;; Disable auto save
  (setq auto-save-default nil)

  ;; Improve scrolling
  (setq scroll-conservatively 100)

  ;; Utilize prettify sybmols
  (when window-system (global-prettify-symbols-mode t))

  ;; Highlight cursor line
  (when window-system (global-hl-line-mode t))

  ;; Relative line numbers
  (global-display-line-numbers-mode)

#+end_src

** Emacs Frame Transparency Configuration
   #+BEGIN_SRC emacs-lisp
     (defun set-frame-transparency (active)
       "Set the frame transparency. ACTIVE non-nil means frame is focused."
       (let ((transparency (if active 98 70))) ; Adjust these numbers for desired transparency
         (set-frame-parameter nil 'alpha transparency)))

     (add-hook 'focus-in-hook (lambda () (set-frame-transparency t)))
     (add-hook 'focus-out-hook (lambda () (set-frame-transparency nil)))

     ;; Set initial transparency
     (set-frame-parameter nil 'alpha 95)
   #+END_SRC

*** Potential Issues and Troubleshooting
   - If the transparency effects are not visible, check if your operating system
     and window manager support variable transparency for applications.
   - Adjust the transparency values in the code if the default levels are not suitable
     for your preferences or display settings.

** Prompt
#+begin_src emacs-lisp
  ;; Change yes-no prompt to y-or-n
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Disable ring
  (setq ring-bell-function 'ignore)
#+end_src

** Visiting the configuration
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
** Reloading the configuration
Simply pressing =Control-c r= will reload this file, very handy.
#+begin_src emacs-lisp
  (defun config-reload ()
    "Reloads config.org from either ~/.emacs.d/ or ~/.config/emacs/."
    (interactive)
    (let ((path1 (expand-file-name "~/.emacs.d/config.org"))
	  (path2 (expand-file-name "~/.config/emacs/config.org")))
      (cond
       ((file-exists-p path1)
	(org-babel-load-file path1)
	(message "Reloaded config from: %s" path1))
       ((file-exists-p path2)
	(org-babel-load-file path2)
	(message "Reloaded config from: %s" path2))
       (t
	(message "config.org not found in either ~/.emacs.d/ or ~/.config/emacs/")))))

  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
** Setting default shell to zsh
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+end_src

* Org Mode
** Config
#+begin_src emacs-lisp
  (org-indent-mode t)
#+end_src
** Org Roam
#+begin_src emacs-lisp 
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory  "~/repos/Brain")
    (org-roam-completetion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n i" . org-roam-node-insert) ;; creates node if it does not exist, and inserts a link to the node point
           ("C-c n f" . org-roam-node-find) ;; create a node if it does not exist, and visits the node
           ("C-c d n" . org-roam-dailies-capture-today)
           ("C-c d t" . org-roam-dailies-goto-today)
           ("C-c d Y" . org-roam-dailies-goto-yesterday)
           ("C-c d T" . org-roam-dailies-goto-tomorrow)
           ("C-c d f d" . org-roam-dailies-goto-date)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))
#+end_src
** Org Modern Mode
*** Install
#+begin_src emacs-lisp
(use-package org-modern 
:ensure t)
#+end_src
*** Config
#+begin_src emacs-lisp
  ;; Add frame borders and window dividers
  (modify-all-frames-parameters
  '((right-divider-width . 40)
      (internal-border-width . 40)))
  (dolist (face '(window-divider
		  window-divider-first-pixel
		  window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))

  (add-hook 'org-mode-hook 'org-indent-mode)

  (setq
  ;; Edit settings
  org-auto-align-tags nil
  org-tags-column 0
  org-catch-invisible-edits 'show-and-error
  org-special-ctrl-a/e t
  org-insert-heading-respect-content t

  ;; Org styling, hide markup etc.
  org-hide-emphasis-markers t
  org-pretty-entities t
  org-ellipsis "…"
  org-indent-indentation-per-level 4

  ;; Agenda styling
  org-agenda-tags-column 0
  org-agenda-block-separator ?─
  org-agenda-time-grid
  '((daily today require-timed)
      (800 1000 1200 1400 1600 1800 2000)
      " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
  org-agenda-current-time-string
  "◀── now ─────────────────────────────────────────────────")

  (custom-set-faces
  '(org-block ((t (:background "#302f38")))))

  (global-org-modern-mode)
#+end_src

* IDO
** Enable ido mode
#+begin_src emacs-lisp
(setq ido-enable-flex-matching nil)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere t)
(ido-mode 1)
#+end_src
** IDO-Vertical
#+begin_src emacs-lisp
(use-package ido-vertical-mode
:ensure t
:init
(ido-vertical-mode 1))
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** SMEX
#+begin_src emacs-lisp
(use-package smex
:ensure
:init (smex-initialize)
:bind
("M-x" . smex))
#+end_src
** Switch Buffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src
* Buffer
** Enable iBuffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)
#+end_src
** Expert
#+begin_src emacs-lisp
(setq ibuffer-expert t)
#+end_src
* Avy
#+begin_src emacs-lisp
(use-package avy
:ensure
:bind
("M-s" . avy-goto-char))
#+end_src
* Evil
** Evil Mode
*** Install
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-leader/leader ",")
    :config
    (evil-leader/set-key
      "w" 'save-buffer
      "t" (lambda ()
            (interactive)
            (ansi-term "zsh"))
      "e" 'ido-switch-buffer
      "TAB TAB" 'comment-line 
      "p v" 'treemacs
      )
    (evil-mode 1))
#+end_src
*** Configure 
Split window configuratio
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "C-w v") 'split-window-right)
(define-key evil-normal-state-map (kbd "C-w s") 'split-window-below)
(define-key evil-normal-state-map (kbd "C-w c") 'delete-window)

;; Focus moves to new window after split
(setq evil-split-window-below t)
(setq evil-split-window-right t)
#+end_src
* Telelpone-line
** Install
#+begin_src emacs-lisp
(unless (package-installed-p 'telephone-line)
(package-install 'telephone-line))
#+end_src
** Enable
#+begin_src emacs-lisp
(telephone-line-mode 1)
#+end_src
** Config
#+begin_src emacs-lisp
  (setq telephone-line-lhs
        '((evil   . (telephone-line-evil-tag-segment))
          (accent . (telephone-line-vc-segment
                     telephone-line-erc-modified-channels-segment
                     telephone-line-process-segment))
          (nil    . (telephone-line-minor-mode-segment
                     telephone-line-buffer-segment))))
  (setq telephone-line-rhs
        '((nil    . (telephone-line-misc-info-segment))
          (accent . (telephone-line-major-mode-segment))
          (evil   . (telephone-line-airline-position-segment))))
#+end_src
* Magit
** Install
#+begin_src emacs-lisp
(unless (package-installed-p 'magit)
(package-install 'magit))
#+end_src
* Ivy
* Treemacs
Tree layout file explorer for emacs
#+begin_src emacs-lisp
  (use-package treemacs
  :ensure t
  :defer t)

  (use-package treemacs-evil
  :ensure t)
#+end_src
#+end_src

** Layout
#+begin_src emacs-lisp
  ;; Disable tool bar
  (tool-bar-mode -1)

  ;; Disable menu bar
  (menu-bar-mode -1)

  ;; Disable scroll bar
  (scroll-bar-mode -1)

  ;; Disable start up emacs message and go to buffer
  (setq inhibit-startup-message t)

  ;; Disable backup file
  (setq make-backup-files nil)

  ;; Disable auto save
  (setq auto-save-default nil)

  ;; Improve scrolling
  (setq scroll-conservatively 100)

  ;; Utilize prettify sybmols
  (when window-system (global-prettify-symbols-mode t))

  ;; Highlight cursor line
  (when window-system (global-hl-line-mode t))

  ;; Relative line numbers
  (global-display-line-numbers-mode)

#+end_src

** Emacs Frame Transparency Configuration
   #+BEGIN_SRC emacs-lisp
     (defun set-frame-transparency (active)
       "Set the frame transparency. ACTIVE non-nil means frame is focused."
       (let ((transparency (if active 98 70))) ; Adjust these numbers for desired transparency
         (set-frame-parameter nil 'alpha transparency)))

     (add-hook 'focus-in-hook (lambda () (set-frame-transparency t)))
     (add-hook 'focus-out-hook (lambda () (set-frame-transparency nil)))

     ;; Set initial transparency
     (set-frame-parameter nil 'alpha 95)
   #+END_SRC

*** Potential Issues and Troubleshooting
   - If the transparency effects are not visible, check if your operating system
     and window manager support variable transparency for applications.
   - Adjust the transparency values in the code if the default levels are not suitable
     for your preferences or display settings.

** Prompt
#+begin_src emacs-lisp
  ;; Change yes-no prompt to y-or-n
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Disable ring
  (setq ring-bell-function 'ignore)
#+end_src

** Visiting the configuration
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
** Reloading the configuration
Simply pressing =Control-c r= will reload this file, very handy.
#+begin_src emacs-lisp
  (defun config-reload ()
    "Reloads config.org from either ~/.emacs.d/ or ~/.config/emacs/."
    (interactive)
    (let ((path1 (expand-file-name "~/.emacs.d/config.org"))
	  (path2 (expand-file-name "~/.config/emacs/config.org")))
      (cond
       ((file-exists-p path1)
	(org-babel-load-file path1)
	(message "Reloaded config from: %s" path1))
       ((file-exists-p path2)
	(org-babel-load-file path2)
	(message "Reloaded config from: %s" path2))
       (t
	(message "config.org not found in either ~/.emacs.d/ or ~/.config/emacs/")))))

  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src
** Setting default shell to zsh
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+end_src

* Org Mode
** Config
#+begin_src emacs-lisp
  (org-indent-mode t)
#+end_src
** Org Roam
#+begin_src emacs-lisp 
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory  "~/repos/brain")
    (org-roam-completetion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n i" . org-roam-node-insert) ;; creates node if it does not exist, and inserts a link to the node point
           ("C-c n f" . org-roam-node-find) ;; create a node if it does not exist, and visits the node
           ("C-c d n" . org-roam-dailies-capture-today)
           ("C-c d t" . org-roam-dailies-goto-today)
           ("C-c d Y" . org-roam-dailies-goto-yesterday)
           ("C-c d T" . org-roam-dailies-goto-tomorrow)
           ("C-c d f d" . org-roam-dailies-goto-date)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))
#+end_src
** Org Modern Mode
*** Install
#+begin_src emacs-lisp
(use-package org-modern 
:ensure t)
#+end_src
*** Config
#+begin_src emacs-lisp
  ;; Add frame borders and window dividers
  (modify-all-frames-parameters
  '((right-divider-width . 40)
      (internal-border-width . 40)))
  (dolist (face '(window-divider
		  window-divider-first-pixel
		  window-divider-last-pixel))
  (face-spec-reset-face face)
  (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))

  (add-hook 'org-mode-hook 'org-indent-mode)

  (setq
  ;; Edit settings
  org-auto-align-tags nil
  org-tags-column 0
  org-catch-invisible-edits 'show-and-error
  org-special-ctrl-a/e t
  org-insert-heading-respect-content t

  ;; Org styling, hide markup etc.
  org-hide-emphasis-markers t
  org-pretty-entities t
  org-ellipsis "…"
  org-indent-indentation-per-level 4

  ;; Agenda styling
  org-agenda-tags-column 0
  org-agenda-block-separator ?─
  org-agenda-time-grid
  '((daily today require-timed)
      (800 1000 1200 1400 1600 1800 2000)
      " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
  org-agenda-current-time-string
  "◀── now ─────────────────────────────────────────────────")

  (custom-set-faces
  '(org-block ((t (:background "#302f38")))))

  (global-org-modern-mode)
#+end_src

* IDO
** Enable ido mode
#+begin_src emacs-lisp
(setq ido-enable-flex-matching nil)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere t)
(ido-mode 1)
#+end_src
** IDO-Vertical
#+begin_src emacs-lisp
(use-package ido-vertical-mode
:ensure t
:init
(ido-vertical-mode 1))
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src
** SMEX
#+begin_src emacs-lisp
(use-package smex
:ensure
:init (smex-initialize)
:bind
("M-x" . smex))
#+end_src
** Switch Buffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src
* Buffer
** Enable iBuffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)
#+end_src
** Expert
#+begin_src emacs-lisp
(setq ibuffer-expert t)
#+end_src
* Avy
#+begin_src emacs-lisp
(use-package avy
:ensure
:bind
("M-s" . avy-goto-char))
#+end_src
* Evil
** Evil Mode
*** Install
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; this is optional since it's already set to t by default
    (setq evil-want-keybinding nil)
    (setq evil-leader/leader ",")
    :config
    (evil-leader/set-key
      "w" 'save-buffer
      "t" (lambda ()
            (interactive)
            (ansi-term "zsh"))
      "e" 'ido-switch-buffer
      "TAB TAB" 'comment-line 
      "p v" 'treemacs
      )
    (evil-mode 1))
#+end_src
*** Configure 
Split window configuratio
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "C-w v") 'split-window-right)
(define-key evil-normal-state-map (kbd "C-w s") 'split-window-below)
(define-key evil-normal-state-map (kbd "C-w c") 'delete-window)

;; Focus moves to new window after split
(setq evil-split-window-below t)
(setq evil-split-window-right t)
#+end_src
** Evil Collection
*** Install
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src
* Telelphone-line
** Install
#+begin_src emacs-lisp
(unless (package-installed-p 'telephone-line)
(package-install 'telephone-line))
#+end_src
** Enable
#+begin_src emacs-lisp
(telephone-line-mode 1)
#+end_src
** Config
#+begin_src emacs-lisp
  (setq telephone-line-lhs
        '((evil   . (telephone-line-evil-tag-segment))
          (accent . (telephone-line-vc-segment
                     telephone-line-erc-modified-channels-segment
                     telephone-line-process-segment))
          (nil    . (telephone-line-minor-mode-segment
                     telephone-line-buffer-segment))))
  (setq telephone-line-rhs
        '((nil    . (telephone-line-misc-info-segment))
          (accent . (telephone-line-major-mode-segment))
          (evil   . (telephone-line-airline-position-segment))))
#+end_src
* Magit
** Install
#+begin_src emacs-lisp
(unless (package-installed-p 'magit)
(package-install 'magit))
#+end_src
* Ivy
* Treemacs
Tree layout file explorer for emacs
#+begin_src emacs-lisp
  (use-package treemacs
  :ensure t
  :defer t)

  (use-package treemacs-evil
  :ensure t)
#+end_src
